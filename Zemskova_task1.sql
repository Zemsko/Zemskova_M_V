/* Flush database */
DROP TABLE IF EXISTS transactions;
DROP TABLE IF EXISTS products_stock;
DROP TABLE IF EXISTS products;
DROP TABLE IF EXISTS customers;
DROP TABLE IF EXISTS order_statuses;
DROP TABLE IF EXISTS brands;
DROP TABLE IF EXISTS product_lines;
DROP TABLE IF EXISTS product_classes;
DROP TABLE IF EXISTS product_sizes;

/* Data tables definition. We create new tables only if they don't exist*/

CREATE TABLE IF NOT EXISTS order_statuses(
	status_name varchar PRIMARY KEY);

CREATE TABLE IF NOT EXISTS brands(
	brand_name varchar PRIMARY KEY);

CREATE TABLE IF NOT EXISTS product_lines(
	product_line varchar PRIMARY KEY);

CREATE TABLE IF NOT EXISTS product_classes(
	product_class varchar PRIMARY KEY);
	
CREATE TABLE IF NOT EXISTS product_sizes(
	product_size varchar PRIMARY KEY);

CREATE TABLE IF NOT EXISTS products(
	record_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	product_id integer,
	brand varchar,
	product_line varchar,
	product_class varchar,
	product_size varchar,
	
	FOREIGN KEY (brand) REFERENCES brands (brand_name),
	FOREIGN KEY (product_line) REFERENCES product_lines (product_line),
	FOREIGN KEY (product_class) REFERENCES product_classes (product_class),
	FOREIGN KEY (product_size) REFERENCES product_sizes (product_size)
);

CREATE TABLE IF NOT EXISTS products_stock(
	stock_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	product_record_id integer,
	list_price float8,
	standard_cost float8,
	
	FOREIGN KEY (product_record_id) REFERENCES products (record_id)
);

CREATE TABLE IF NOT EXISTS customers(
    customer_id integer PRIMARY KEY,
	first_name varchar,
	last_name varchar,
	gender varchar,
	DOB date,
	job_title varchar,
	job_industry_category varchar,
	wealth_segment varchar,
	deceased_indicator varchar,
	owns_car varchar,
	address varchar,
	postcode varchar,
	state varchar,
	country varchar,
	property_valuation varchar
);

CREATE TABLE IF NOT EXISTS transactions(
 	transaction_id integer PRIMARY KEY,
	product_stock_id integer,
	customer_id integer,
	transaction_date timestamp,
	online_order bool,
	order_status varchar,
	
	FOREIGN KEY (product_stock_id) REFERENCES products_stock (stock_id),
	FOREIGN KEY (customer_id) REFERENCES customers (customer_id),
	FOREIGN KEY (order_status) REFERENCES order_statuses (status_name)
);

/* Data transformation and loading */
/* Form reference tables with statuses, types and brands names */
INSERT INTO order_statuses
	(status_name)
	SELECT order_status
	FROM temp_transactions
	GROUP BY order_status;

INSERT INTO brands
	(brand_name)
	SELECT brand
	FROM temp_transactions
	WHERE brand IS NOT NULL
	GROUP BY brand;

INSERT INTO product_lines
	(product_line)
	SELECT product_line
	FROM temp_transactions
	WHERE brand IS NOT NULL
	GROUP BY product_line;

INSERT INTO product_classes
	(product_class)
	SELECT product_class
	FROM temp_transactions
	WHERE brand IS NOT NULL
	GROUP BY product_class;

INSERT INTO product_sizes
	(product_size)
	SELECT product_size
	FROM temp_transactions
	WHERE brand IS NOT NULL
	GROUP BY product_size;

/* Fullfill known products with brand name and its properties */
INSERT INTO products(
	product_id,
	brand,
	product_line,
	product_class,
	product_size)
	SELECT
		product_id,
		brand,
		product_line,
		product_class,
		product_size
	FROM temp_transactions
	WHERE brand IS NOT NULL
	GROUP BY 
		product_id,
		brand,
		product_line,
		product_class,
		product_size
	ORDER BY product_id, brand;

/* Fulfill products purchases which reflects exact date stock and retail price*/
INSERT INTO products_stock(
	product_record_id,
	list_price,
	standard_cost)
	SELECT
		pr.record_id,
		tt.list_price,
		tt.standard_cost
	FROM temp_transactions AS tt
	RIGHT JOIN products AS pr
		ON tt.product_id = pr.product_id AND
			tt.brand = pr.brand AND
			tt.product_line = pr.product_line AND
			tt.product_class = pr.product_class AND
			tt.product_size = pr.product_size
	GROUP BY 
		pr.record_id,
		tt.list_price,
		tt.standard_cost;

/* Customers table fulfilling */
INSERT INTO customers(
	customer_id,
	first_name,
	last_name,
	gender,
	DOB,
	job_title,
	job_industry_category,
	wealth_segment,
	deceased_indicator,
	owns_car,
	address,
	postcode,
	state,
	country,
	property_valuation)
	SELECT * FROM temp_customers;

/* Having all references populated we are ready to load transactions*/
INSERT INTO transactions(
 	transaction_id,
	product_stock_id,
	customer_id,
	transaction_date,
	online_order,
	order_status)	
	SELECT 
		tt.transaction_id,
		ps.stock_id,
		cs.customer_id,
		tt.transaction_date,
		tt.online_order,
		tt.order_status
	FROM products_stock AS ps
	LEFT JOIN products AS pr
		ON ps.product_record_id = pr.record_id
	LEFT JOIN temp_transactions AS tt
		ON tt.product_id = pr.product_id AND
			tt.brand = pr.brand AND
			tt.product_line = pr.product_line AND
			tt.product_class = pr.product_class AND
			tt.product_size = pr.product_size AND
			tt.list_price = ps.list_price AND
			tt.standard_cost = ps.standard_cost
	LEFT JOIN customers AS cs
		ON tt.customer_id = cs.customer_id
        WHERE tt.brand IS NOT NULL;

/* Test query to match source data */
SELECT
	tt.transaction_id,
	pr.product_id,
	cs.customer_id,
	tt.transaction_date,
	tt.online_order,
	pr.brand,
	pr.product_line,
	pr.product_class,
	pr.product_size,
	ps.list_price,
	ps.standard_cost
FROM transactions AS tt
LEFT JOIN customers AS cs
	ON cs.customer_id = tt.customer_id
LEFT JOIN products_stock AS ps
	ON ps.stock_id = tt.product_stock_id
LEFT JOIN products AS pr
	ON ps.product_record_id = pr.record_id
ORDER BY tt.transaction_id ASC
